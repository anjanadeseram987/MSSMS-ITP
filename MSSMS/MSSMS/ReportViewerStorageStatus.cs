using MSSMS.DBHandler;
using MSSMS.Enums;
using MSSMS.Models;
using MSSMS.Utilities;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MSSMS
{
    public partial class ReportViewerStorageStatus : Form
    {
        private ReportType reportType = ReportType.NONE;
        private DateTime statDateTime = DateTime.MinValue;
        private DateTime endDateTime = DateTime.MinValue;
        private ReportsDBHandler reportsDBHandler = new ReportsDBHandler();
        private List<OrderItem> storedOrderItems = new List<OrderItem>();

        public ReportViewerStorageStatus(ReportType reportType, DateTime startDateTime, DateTime endDateTime)
        {
            InitializeComponent();

            this.reportType = reportType;
            this.statDateTime = startDateTime;
            this.endDateTime = endDateTime;

            if (reportType == ReportType.MONTHLY)
            {
                generateMonthlyReport();
            }
        }

        private void ReportViewerStorageStatus_Load(object sender, EventArgs e)
        {
            NotificationManager.hideInAppNotification(panelInAppNotifications);
        }

        private void btnCloseInAppNotification_Click(object sender, EventArgs e)
        {
            NotificationManager.hideInAppNotification(panelInAppNotifications);
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            NotificationManager.hideInAppNotification(panelInAppNotifications);
            if (dataGridReport.Rows.Count > 0)
            {
                Microsoft.Office.Interop.Excel.Application excellApplication = new Microsoft.Office.Interop.Excel.Application();
                excellApplication.Application.Workbooks.Add(Type.Missing);

                for (int i = 0; i < dataGridReport.Columns.Count - 1; i++)
                {
                    try
                    {
                        excellApplication.Cells[1, i] = dataGridReport.Columns[i - 1].HeaderText;
                    }
                    catch (Exception ex)
                    {

                    }
                }

                for (int i = 0; i < dataGridReport.Rows.Count; i++)
                {
                    for (int j = 0; j < dataGridReport.Columns.Count - 2; j++)
                    {
                        excellApplication.Cells[i + 2, j + 1] = dataGridReport.Rows[i].Cells[j].Value.ToString();
                    }
                }
                excellApplication.Columns.AutoFit();
                excellApplication.Visible = true;

                NotificationManager.showInAppNotification(panelInAppNotifications, lableInAppNotification, pbInAppNotification, btnCloseInAppNotification, "Report Exported.", NotificationStates.SUCCESS);
            }
            else
            {
                NotificationManager.showInAppNotification(panelInAppNotifications, lableInAppNotification, pbInAppNotification, btnCloseInAppNotification, "Nothing to Export.", NotificationStates.INFORMATION);
            }
        }

        private void generateMonthlyReport()
        {
            this.labelInfo.Text = "REPORT ISSUED ON: " + DateTime.Now + "\nREPORT GENERATED BY: " + SessionManager.user.employeeId + "\n\nREPORT TYPE: MONTHLY REPORT.\nMONTH: " + this.statDateTime.ToString("MM-yyyy");

            NotificationManager.hideInAppNotification(panelInAppNotifications);

            try
            {
                storedOrderItems = reportsDBHandler.getMonthlyStorageStatusReport(this.statDateTime);
                dataGridReport.Rows.Clear();

                //binding
                foreach (OrderItem orderItem in storedOrderItems)
                {
                    dataGridReport.Rows.Add(orderItem.order.order_no, orderItem.orderItemNo, orderItem.buyer.buyerName + "/" + orderItem.brand.brandName, orderItem.teaProduct.teaProductName+ " - " + orderItem.teaProduct.teaProductflavor, ( orderItem.orderItemContent.teabagWeight * orderItem.orderItemContent.teabagQuantity * orderItem.orderItemContent.icQuantity * orderItem.mcQuantity).ToString() + " KG", (orderItem.orderItemContent.teabagWeight * orderItem.orderItemContent.teabagQuantity * orderItem.orderItemContent.icQuantity * orderItem.stored_mc_count).ToString() + " KG", orderItem.stored_mc_count > 0 ? (100 - (((orderItem.orderItemContent.teabagWeight * orderItem.orderItemContent.teabagQuantity * orderItem.orderItemContent.icQuantity * orderItem.stored_mc_exp_count) /(orderItem.orderItemContent.teabagWeight * orderItem.orderItemContent.teabagQuantity * orderItem.orderItemContent.icQuantity * orderItem.mcQuantity)) * 100 )) + "%" : "N/A", orderItem.shippingSchedule.loading_date == DateTime.MinValue ? "N/A" : orderItem.shippingSchedule.loading_date.ToShortDateString() );
                }
            }
            catch (MSSMUIException ex)
            {
                NotificationManager.showInAppNotification(panelInAppNotifications, lableInAppNotification, pbInAppNotification, btnCloseInAppNotification, ex.Message, NotificationStates.ERROR);
            }
            catch (Exception ex)
            {
                NotificationManager.showInAppNotification(panelInAppNotifications, lableInAppNotification, pbInAppNotification, btnCloseInAppNotification, ex.Message, NotificationStates.ERROR);
            }
        }

        private void lableInAppNotification_Click(object sender, EventArgs e)
        {

        }
    }
}
